# coding:utf-8


from 数据输入 import 输入_通用格式处理
from 数据输入 import 输入_JX3BOX格式处理
from 数据输入 import 参考_系数
from 数据输入 import 玩家属性
from 状态效果 import 状态效果


class 个体对象():
    '''
    每个个体对象是一个可操作的独立个体. 例如, 每个符合该属性模板的玩家, NPC 都是一个独立的个体对象.
    '''

    def __init__(self, 属性dict={}) -> None:
        self.属性集 = 玩家属性.属性集(属性dict)
        self.状态集 = 状态效果.状态集()
        self.心法转化初始化()
        # self.状态集.田螺阵 = 状态效果.状态效果(self.属性集.元气, 100, 0, self, True)
        # self.状态集.田螺阵.获得效果()

    def 心法转化初始化(self, 初始化前修正会心=True):
        '''
        初始化心法转化的攻击和会心, 并给出心法主属性(元气)变更的方法.

        如果初始化前修正会心设定为 True (即默认设定), 那么会在当前玩家属性的会心基础中扣除相当于元气加成的那部分, 然后在计算元气转换额外攻击和额外会心.

        如果设定为 False, 那么将不会扣除基础会心. 这种情况发生于仅计算了装备的属性总和, 而未考虑心法影响的情况.
        '''
        if 初始化前修正会心:
            元气转会心值 = 状态效果.状态效果(作用属性=self.属性集.会心.阳性内功, 作用数值=round(self.属性集.元气.最终 * 0.29))
            for attr in self.属性集.会心.attr:
                简单会心属性 = getattr(self.属性集.会心, attr)
                if 简单会心属性.基础 > 元气转会心值.作用数值:
                    简单会心属性.基础 -= 元气转会心值.作用数值
        def 获取元气转化额外效果() -> dict:
            心法转化系数 = 参考_系数.系数().获取心法转化系数()
            元气转额外攻击值 = 状态效果.状态效果(作用属性=self.属性集.攻击.阳性内功, 作用数值=round(self.属性集.元气.最终 * 心法转化系数['元气转额外攻击系数']))
            元气转额外会心值 = 状态效果.状态效果(作用属性=self.属性集.会心.阳性内功, 作用数值=round(self.属性集.元气.最终 * 心法转化系数['元气转额外会心系数']))
            额外效果 = {
                '元气转额外阳性内功攻击': 元气转额外攻击值,
                '元气转额外阴性内功攻击': 元气转额外攻击值,
                '元气转额外阳性内功会心': 元气转额外会心值,
                '元气转额外阴性内功会心': 元气转额外会心值
            }
            return 额外效果
        元气转化额外效果dict = 获取元气转化额外效果()
        self.状态集 = 状态效果.状态集(元气转化额外效果dict)

        @self.属性集.主属性变更
        def 元气变更装饰器上下文(part):
            '''使用装饰器以在元气变更前后执行一些操作'''
            if part == 1:
                # 元气变更前, 移除元气转换的额外属性
                元气转化额外效果dict = 获取元气转化额外效果()
                self.状态集.批量失去效果(元气转化额外效果dict)
                # for key in 元气转化额外效果dict:
                #     getattr(self.状态集, key).失去效果()
            if part == 2:
                # 元气变更后, 添加元气转换的额外属性
                元气转化额外效果dict = 获取元气转化额外效果()
                self.状态集.批量初始化并获得效果(元气转化额外效果dict)
        # 经过装饰器后, '元气变更装饰器上下文' 函数参数变为: (字段: Any, 额外: Any, 额外1024分比: Any)

        def 元气变更(额外, 额外1024分比):
            '''使用的时候不需要输入字段'''
            元气变更装饰器上下文('元气', 额外, 额外1024分比)
        self.元气变更 = 元气变更

    def 输出dict结果(self):
        ret = self.属性集.输出dict结果()
        return ret

    def __str__(self) -> str:
        return str(self.输出dict结果())


def test_func() -> dict:
    玩家 = 个体对象(输入_JX3BOX格式处理.JX3BOX数据().导出数据())
    print(玩家)


if __name__ == '__main__':
    test_func()
